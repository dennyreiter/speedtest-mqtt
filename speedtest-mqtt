#!/usr/bin/python3

import yaml
import speedtest
import paho.mqtt.client as mqtt
import json
import time

from configurator import Config

with open("config.yaml", "r") as file:
    config = Config(yaml.safe_load(file))


# Define MQTT event callbacks
def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))


def on_disconnect(client, userdata, rc):
    if rc != 0:
        print("Unexpected disconnection.")


def on_message(client, obj, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))


def on_publish(client, obj, mid):
    print("mid: " + str(mid))


def on_subscribe(client, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))


def on_log(client, obj, level, string):
    print(string)


mqttc = mqtt.Client()
# Assign event callbacks
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe
mqttc.on_disconnect = on_disconnect

# Uncomment to enable debug messages
# mqttc.on_log = on_log

mqttc.username_pw_set(config.mqtt.username, password=config.mqtt.password)
mqttc.connect(config.mqtt.server, config.mqtt.serverPort, 60)

mqttc.loop_start()

s = speedtest.Speedtest()
while True:
    s.get_servers(config.speedtest.servers)
    s.get_best_server()
    s.download(threads=config.speedtest.threads)
    s.upload(threads=config.speedtest.threads)
    s.results.share()

    results_dict = s.results.dict()
    results_dict["download"] = int(results_dict["download"] / 1000000)
    results_dict["upload"] = int(results_dict["upload"] / 1000000)
    data = json.dumps(results_dict)
    print(data)

    mqttc.publish(
        config.mqtt.topic,
        payload=data,
        qos=config.mqtt.qos,
        retain=False,
    )

    time.sleep(config.speedtest.interval)
